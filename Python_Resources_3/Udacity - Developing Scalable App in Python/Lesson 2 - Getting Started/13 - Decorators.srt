0:00:00.170,0:00:05.280
So if you add the timer.timedFunction[br]decorator to the sumUp function,

0:00:05.280,0:00:10.320
it's the same as if we had reassigned[br]sumUp to be this wrapped up version.

0:00:10.320,0:00:13.860
And when the code called[br]the sumUp function afterwards,

0:00:13.860,0:00:16.970
it returned the sum of[br]the numbers from 0 to 10 million.

0:00:16.970,0:00:19.640
But it also printed out how[br]long it took to add up.

0:00:19.640,0:00:22.440
That timing feature was[br]added by this decorator.

0:00:22.440,0:00:25.830
The details of how decorators work,[br]are rooted in functional programming.

0:00:25.830,0:00:27.720
I've put a couple of links[br]in the instructor notes,

0:00:27.720,0:00:29.160
that go into much more depth.

0:00:29.160,0:00:32.630
And just like other functions,[br]decorators can appear in Python modules.

0:00:32.630,0:00:34.890
You'll be seeing an example[br]right up ahead in this course.
