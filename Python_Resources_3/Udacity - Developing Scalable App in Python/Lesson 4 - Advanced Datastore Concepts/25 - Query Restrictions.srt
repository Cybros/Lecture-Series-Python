0:00:00.120,0:00:02.620
So far, we have described how data store uses

0:00:02.620,0:00:05.890
indexes to execute queries. Now is the time to look

0:00:05.890,0:00:09.410
at some query restrictions that exist. As you know

0:00:09.410,0:00:13.400
by now, data store was designed to be massively scalable.

0:00:13.400,0:00:16.420
Therefore the performance of queries should only depend on

0:00:16.420,0:00:18.870
the size of the result set, in other words the

0:00:18.870,0:00:22.090
amount of data returned in the query and not

0:00:22.090,0:00:25.450
on the overall amount of data stored in data storage.

0:00:25.450,0:00:28.060
To meet this objective, data store always uses the

0:00:28.060,0:00:30.720
indexes to find the matching data. And this leads

0:00:30.720,0:00:32.970
to two restrictions you should be aware of when

0:00:32.970,0:00:36.880
you design your applications. The first one is an inequality

0:00:36.880,0:00:39.780
filter can be applied to at most one property

0:00:39.780,0:00:43.970
within the query. The following filter is not valid

0:00:43.970,0:00:46.600
because we are applying an inequality filter for two

0:00:46.600,0:00:50.450
different properties. The second rule is that a property with

0:00:50.450,0:00:53.830
an equality filter must be sorted first. The

0:00:53.830,0:00:57.530
following query is for example not valid. Since the

0:00:57.530,0:01:01.300
property max attendees is used with an inequality filter,

0:01:01.300,0:01:04.099
it must be the first property after Sort By,

0:01:04.099,0:01:06.790
not name. The best way to avoid these

0:01:06.790,0:01:09.230
restrictions is to think and plan which queries you

0:01:09.230,0:01:12.600
need during the design phase. That way, you can

0:01:12.600,0:01:16.130
design around them. So now we'll do an exercise

0:01:16.130,0:01:18.180
where you will explore these query restrictions.
