0:00:00.462,0:00:01.980
So let's now look at what happens when in the

0:00:01.980,0:00:06.870
case of strong consistency. In strong consistency, you're always guaranteed

0:00:06.870,0:00:09.120
to get the data that has returned from a put

0:00:09.120,0:00:12.890
operation towards the data store API. So when the query

0:00:12.890,0:00:15.800
is received by the data story API, it will see

0:00:15.800,0:00:17.960
that there are pending updates for the data that you

0:00:17.960,0:00:21.640
are querying for. It will then wait and then get

0:00:21.640,0:00:25.890
the data once the datastore backend has finished. And then

0:00:25.890,0:00:28.610
it returns that result. That's why

0:00:28.610,0:00:31.390
it's called strong consistency. The result from

0:00:31.390,0:00:34.100
queries will always be consistent with put

0:00:34.100,0:00:37.070
operations performed earlier toward the datastore API.

0:00:38.540,0:00:41.070
So which is better, eventual consistency

0:00:41.070,0:00:43.890
or strong consistency? Well that depends on

0:00:43.890,0:00:46.688
your application. Let's look at two examples.

0:00:46.688,0:00:49.910
The first one Posting a Blog Comment.

0:00:50.930,0:00:53.680
In this case eventual consistency's probably best to

0:00:53.680,0:00:56.430
use. This is because to update, it probably

0:00:56.430,0:00:58.670
does not need to be immediate. And there

0:00:58.670,0:01:01.450
is no operation dependency, in other words there are

0:01:01.450,0:01:04.690
no subsequent operations that relies on data being

0:01:04.690,0:01:07.920
completely up to date. What about this one? An

0:01:07.920,0:01:11.940
atm money withdrawal. Well that's certainly candidate for

0:01:11.940,0:01:16.010
strong consistency because even though you may not like

0:01:16.010,0:01:19.970
it, the new balance should be reflected immediately and

0:01:19.970,0:01:22.700
there may be operation dependency. For example, there may

0:01:22.700,0:01:25.350
be purchases coming in on that account that depends

0:01:25.350,0:01:28.280
on an up to date balance. You may now

0:01:28.280,0:01:30.750
say, so why don't I use strong consistency all

0:01:30.750,0:01:34.880
the time? Well, remember the use case. Strong consistency

0:01:34.880,0:01:37.150
causes a lot of wait and locks in your

0:01:37.150,0:01:41.060
application. So if you want to build applications that scale.

0:01:41.060,0:01:43.500
You should use eventual consistency as often as

0:01:43.500,0:01:49.130
possible. Luckily, datastore supports both of these models.

0:01:49.130,0:01:51.190
You can use the default fast and scalable

0:01:51.190,0:01:53.920
eventual consistency when required. And when you need

0:01:53.920,0:01:57.410
to ensure strong consistency, that is also supported.

0:01:57.410,0:02:00.370
Let's see how, because it's quite simple. You

0:02:00.370,0:02:03.350
enforce strong consistency when you have an ancestor

0:02:03.350,0:02:07.548
relationship and your query use filter by this ancestor.

0:02:07.548,0:02:09.789
If those two conditions are met all children

0:02:09.789,0:02:12.940
will be queried using strong consistency, in all other

0:02:12.940,0:02:17.020
cases data will be retrieved using eventual consistency. As

0:02:17.020,0:02:20.610
we already discussed, strong consistency has a performance and

0:02:20.610,0:02:24.390
scalability penalty compared to eventual consistency. So you

0:02:24.390,0:02:26.620
need to look at your application to determine the

0:02:26.620,0:02:31.010
best option for every query situation. All right, enough

0:02:31.010,0:02:33.740
theory for now. Time for a quiz. Good luck.
