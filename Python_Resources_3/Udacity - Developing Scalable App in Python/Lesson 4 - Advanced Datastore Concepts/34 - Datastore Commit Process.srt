0:00:00.220,0:00:01.589
We will now turn our attention to

0:00:01.589,0:00:04.550
the Datastore Commit Process. This process describes

0:00:04.550,0:00:07.890
to consistency rules for storing data. Datastore

0:00:07.890,0:00:12.280
has two consistency models, Eventual Consistency and Strong

0:00:12.280,0:00:14.850
Consistency. Let's look at these in more

0:00:14.850,0:00:17.790
detail. In this use case diagram we have

0:00:17.790,0:00:22.030
three things. Your Application, the datastore API

0:00:22.030,0:00:25.300
that your application calls and the datastore backend,

0:00:25.300,0:00:27.660
which performs work that your application is not involved

0:00:27.660,0:00:30.790
in. When your application wants to store an entity,

0:00:30.790,0:00:33.860
it performs a put operation towards the datastore API.

0:00:35.140,0:00:37.740
The datastore backend then writes this entity to a

0:00:37.740,0:00:40.940
log. When the write is completed, control is turned

0:00:40.940,0:00:44.080
back to your application. At this point the Datastore

0:00:44.080,0:00:47.790
backend has promised to write the entity to Datastore.

0:00:47.790,0:00:50.720
Observe however that the entity has not been written yet.

0:00:50.720,0:00:52.280
It has only been written to a log.

0:00:53.720,0:00:55.890
The Datastore backend now goes through to work to

0:00:55.890,0:00:59.360
make everything consistent. It does this by using the

0:00:59.360,0:01:03.440
login information to update the entity storage and then

0:01:03.440,0:01:06.920
it updates all the indexes. So observe that

0:01:06.920,0:01:10.270
when control is returned to your application, datastore may

0:01:10.270,0:01:12.310
not have done all the work required for the

0:01:12.310,0:01:16.170
data to be updated. Is this good or bad?

0:01:16.170,0:01:18.540
Well it's good, because this means that you have

0:01:18.540,0:01:22.230
less latency in your application. But the question now

0:01:22.230,0:01:24.800
becomes, what happens if a query is issued that

0:01:24.800,0:01:27.870
would retrieve the data your application just requested to

0:01:27.870,0:01:31.850
put into data store? Well, with eventual consistency the

0:01:31.850,0:01:34.220
data store API will not wait for this to

0:01:34.220,0:01:37.960
happen. So it only considers matching data that already

0:01:37.960,0:01:41.730
exists. That is data, that was already in data store

0:01:41.730,0:01:44.840
prior to your put call. And then it

0:01:44.840,0:01:48.730
returns that result. That's why it's called eventual

0:01:48.730,0:01:52.570
consistency. Queries will be eventually consistent with put

0:01:52.570,0:01:55.070
operations performed to what's the data store API.
