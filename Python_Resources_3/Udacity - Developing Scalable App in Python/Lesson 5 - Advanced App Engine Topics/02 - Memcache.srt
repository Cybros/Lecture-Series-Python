0:00:00.570,0:00:03.100
So data store is a great way to store

0:00:03.100,0:00:06.270
and retrieve massive amounts of data. So therefore, it is

0:00:06.270,0:00:09.300
very scalable. But it would still be faster if the

0:00:09.300,0:00:12.220
data was served from memory. As we know, we want

0:00:12.220,0:00:15.420
our application to have as small latency as possible.

0:00:15.420,0:00:19.060
So whatever we can do to reduce this, the better.

0:00:19.060,0:00:22.340
This is exactly where Memcache comes in handy. As the

0:00:22.340,0:00:25.770
name suggests, Memcache is a memory cache which sits next

0:00:25.770,0:00:28.610
to your app engine instances. Any data you store

0:00:28.610,0:00:31.810
here can be immediately retrieved without having to read from

0:00:31.810,0:00:34.960
data store. So when you store data in data store,

0:00:34.960,0:00:37.680
you can also store a copy of Memcache. That means

0:00:37.680,0:00:40.660
you can retrieve it from Memcache later, and therefore deliver

0:00:40.660,0:00:43.950
response really, really fast. This is great, since you don't

0:00:43.950,0:00:47.630
want your users to wait. Both Datastore and Memcache are

0:00:47.630,0:00:50.960
shared across any number of instances of your application that

0:00:50.960,0:00:53.730
app NU starts. This means that they can all

0:00:53.730,0:00:56.970
access the same data provided that your application updates

0:00:56.970,0:01:00.990
Memcache when it updates Datastore. The difference between Memcache

0:01:00.990,0:01:04.550
and Datastore however, is that Memcache is a cache.

0:01:04.550,0:01:07.200
This means that the app engine platform can decide

0:01:07.200,0:01:09.720
to free memory at any time, in which case

0:01:09.720,0:01:13.600
the retrieve operation will fail. So your application code

0:01:13.600,0:01:16.080
needs to be prepared if this happens, and in that

0:01:16.080,0:01:19.000
case retrieve the data from Datastore. Let's look at

0:01:19.000,0:01:22.360
a summary of Memcache. Memcache is of course, not limited

0:01:22.360,0:01:25.730
to cache Datastore information. You can put any data you

0:01:25.730,0:01:29.130
want in Memcache. Since the data is retrieved directly from

0:01:29.130,0:01:32.310
memory, the latency is very low. This help it build

0:01:32.310,0:01:35.590
applications that can scale to extreme levels. But since it's

0:01:35.590,0:01:38.100
a memory cache, it also means that the memory could

0:01:38.100,0:01:41.470
be freed and the data be evicted from the cache.

0:01:41.470,0:01:44.170
So your code can not rely on it always

0:01:44.170,0:01:47.220
residing in the memcache. All right, that's the overview

0:01:47.220,0:01:49.550
of Memcache, it's now time for you to hack

0:01:49.550,0:01:52.720
in by adding Memcache functionality to the comfort central app.
